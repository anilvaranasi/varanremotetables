<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script_vtable">
    <sys_script_vtable action="INSERT_OR_UPDATE">
        <active>true</active>
        <advanced>false</advanced>
        <cache_isolation_level>USER</cache_isolation_level>
        <cache_strategy>CACHE_BY_QUERY</cache_strategy>
        <cache_ttl>0</cache_ttl>
        <name>GetData</name>
        <script><![CDATA[/**
 * Using `v_query`, add the rows to `v_table`
 */
(function executeQuery(v_table, v_query) {
	if (v_query.isGet()) {
		bySysId(v_table, v_query, v_query.getSysId());
	}
	else if (v_query.getParameter("caller_id")) {
		byCallerId(v_table, v_query, v_query.getParameter("caller_id"));
	}
	else {
		fetchAllIncidents(v_table, v_query);
	}
	/**
	 * fetch all incidents records from the remote instance
	 */
	function fetchAllIncidents(v_table, v_query) {
		// Uses RestMessage with name 'Remote Instance Incidents' and function 'All Incidents'
		// Create a RestMessage first which calls an external REST service
		var restMessage = new sn_ws.RESTMessageV2('Remote Instance Incidents', 'All Incidents');
		restMessage.setStringParameterNoEscape("sysparm_limit", 3);
		loadData(v_table, v_query, restMessage);
	}
	/**
	 * fetches a specific record from the remote instance with Sys Id being `sys_id`
	 */
	function bySysId(v_table, v_query, sys_id) {
		// Uses RestMessage with name 'Remote Instance Incidents' and function 'By SysId'
		var restMessage = new sn_ws.RESTMessageV2('Remote Instance Incidents', 'By SysId');
		// sets variable 'sys_id'
		restMessage.setStringParameterNoEscape("sys_id", sys_id);
		loadData(v_table, v_query, restMessage);
	}
	/**
	 * fetches records from the remote instance with Caller (caller_id) being `caller_id`
	 */
	function byCallerId(v_table, v_query, caller_id) {
		var restMessage = new sn_ws.RESTMessageV2('Remote Instance Incidents', 'By CallerId');
		restMessage.setStringParameterNoEscape("caller_id", caller_id);
		restMessage.setStringParameterNoEscape("sysparm_limit", 3);
		loadData(v_table, v_query, restMessage);
	}
	/**
	 * Adds rows to `v_table` using `restMessage`
	 */
	function loadData(v_table, v_query, restMessage) {
		try {
			var response = restMessage.execute();
			var responseBody = response.getBody();
			
			// if REST call ends up in an error, set the last error message which shows up
			// at the bottom of the list view
			if (response.haveError()) {
				v_query.setLastErrorMessage(response.getErrorMessage());
				// can use gs.error() or gs.addErrorMessage() while debugging
				// gs.debug() messages visible in session debugger
				// gs.debug(response.getErrorMessage());
				return;
			}
		} catch (ex) {
			v_query.setLastErrorMessage(ex.message);
			// gs.debug(ex.message);
			return;
		}
		var transformerDefinition = getTransformerDefinition();
		var transformer = new sn_tfrm.Transformer(transformerDefinition, responseBody);
		// transformer parses the responseBody and extracts rows
		while (transformer.transform()) {
			// row is field-value map e.g. { active:"true", number: "INC0000001"}
			var row = transformer.getRow();
			// you may do any additional transformations to the row like GlideDuration, GlideDataTime etc. For example,
			// row.duration = new GlideDuration(row.duration);
			// finally add the row to the remote table
			v_table.addRow(row);
		}
	}
	/**
	 * returns a sn_tfrm.TransformerDefinition, which defines the mapping of the table fields and elements in the response body
	 */
	function getTransformerDefinition() {
		// create a rule list to map a field to its element path
		var ruleList = new sn_tfrm.TransformerRuleList()
			.fromJSON() // the response body is a JSON
			// 'active' field maps to path '$.active'
			.addRule("active", "$.active")
			.addRule("caller_id", "$.caller_id.value")
			.addRule("number", "$.number")
			.addRule("short_description", "$.short_description")
			.addRule("sys_id", "$.sys_id")
			.addRule("updates", "$.sys_mod_count");
var recordPath = "$.result";
		return new sn_tfrm.TransformerDefinition(ruleList, recordPath);
	}
})(v_table, v_query);/**
 * Using `v_query`, add the rows to `v_table`
 */
(function executeQuery(v_table, v_query) {
	if (v_query.isGet()) {
		bySysId(v_table, v_query, v_query.getSysId());
	}
	else if (v_query.getParameter("caller_id")) {
		byCallerId(v_table, v_query, v_query.getParameter("caller_id"));
	}
	else {
		fetchAllIncidents(v_table, v_query);
	}
	/**
	 * fetch all incidents records from the remote instance
	 */
	function fetchAllIncidents(v_table, v_query) {
		// Uses RestMessage with name 'Remote Instance Incidents' and function 'All Incidents'
		// Create a RestMessage first which calls an external REST service
		var restMessage = new sn_ws.RESTMessageV2('Remote Instance Incidents', 'All Incidents');
		restMessage.setStringParameterNoEscape("sysparm_limit", 3);
		
		loadData(v_table, v_query, restMessage);
	}
	/**
	 * fetches a specific record from the remote instance with Sys Id being `sys_id`
	 */
	function bySysId(v_table, v_query, sys_id) {
		// Uses RestMessage with name 'Remote Instance Incidents' and function 'By SysId'
		var restMessage = new sn_ws.RESTMessageV2('Remote Instance Incidents', 'By SysId');
		// sets variable 'sys_id'
		restMessage.setStringParameterNoEscape("sys_id", sys_id);
		loadData(v_table, v_query, restMessage);
	}
	/**
	 * fetches records from the remote instance with Caller (caller_id) being `caller_id`
	 */
	function byCallerId(v_table, v_query, caller_id) {
		var restMessage = new sn_ws.RESTMessageV2('Remote Instance Incidents', 'By CallerId');
		restMessage.setStringParameterNoEscape("caller_id", caller_id);
		loadData(v_table, v_query, restMessage);
	}
	/**
	 * Adds rows to `v_table` using `restMessage`
	 */
	function loadData(v_table, v_query, restMessage) {
		try {
			var response = restMessage.execute();
			var responseBody = response.getBody();
			
			// if REST call ends up in an error, set the last error message which shows up
			// at the bottom of the list view
			if (response.haveError()) {
				v_query.setLastErrorMessage(response.getErrorMessage());
				// can use gs.error() or gs.addErrorMessage() while debugging
				// gs.debug() messages visible in session debugger
				// gs.debug(response.getErrorMessage());
				return;
			}
		} catch (ex) {
			v_query.setLastErrorMessage(ex.message);
			// gs.debug(ex.message);
			return;
		}
		var transformerDefinition = getTransformerDefinition();
		var transformer = new sn_tfrm.Transformer(transformerDefinition, responseBody);
		// transformer parses the responseBody and extracts rows
		while (transformer.transform()) {
			// row is field-value map e.g. { active:"true", number: "INC0000001"}
			var row = transformer.getRow();
			// you may do any additional transformations to the row like GlideDuration, GlideDataTime etc. For example,
			// row.duration = new GlideDuration(row.duration);
			// finally add the row to the remote table
			v_table.addRow(row);
		}
	}
	/**
	 * returns a sn_tfrm.TransformerDefinition, which defines the mapping of the table fields and elements in the response body
	 */
	function getTransformerDefinition() {
		// create a rule list to map a field to its element path
		var ruleList = new sn_tfrm.TransformerRuleList()
			.fromJSON() // the response body is a JSON
			// 'active' field maps to path '$.active'
			.addRule("active", "$.active")
			.addRule("caller_id", "$.caller_id.value")
			.addRule("number", "$.number")
			.addRule("short_description", "$.short_description")
			.addRule("sys_id", "$.sys_id")
			.addRule("updates", "$.sys_mod_count");
		var recordPath = "$.result";
		return new sn_tfrm.TransformerDefinition(ruleList, recordPath);
	}
})(v_table, v_query);]]></script>
        <sys_class_name>sys_script_vtable</sys_class_name>
        <sys_created_by>adminanil</sys_created_by>
        <sys_created_on>2023-12-01 07:04:59</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>b27359da07be3d14b965f7208c1ed079</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>GetData</sys_name>
        <sys_package display_value="VaranRemoteTables" source="x_146833_varanremo">a93b051a073e3d14b965f7208c1ed0cf</sys_package>
        <sys_policy/>
        <sys_scope display_value="VaranRemoteTables">a93b051a073e3d14b965f7208c1ed0cf</sys_scope>
        <sys_update_name>sys_script_vtable_b27359da07be3d14b965f7208c1ed079</sys_update_name>
        <sys_updated_by>adminanil</sys_updated_by>
        <sys_updated_on>2023-12-01 07:39:28</sys_updated_on>
        <table>x_146833_varanremo_st_dogfacts</table>
    </sys_script_vtable>
</record_update>
